// Jenkinsfile for the ML Training Pipeline
// This pipeline is structured to be compatible with Docker on Windows.

pipeline {
    // 1. Use a generic agent for the main pipeline execution.
    agent any

    // 2. Define stages
    stages {

        // STAGE 1: Run all build and train steps inside a dedicated Docker container
        stage('Build and Train in Container') {
            // This agent block applies ONLY to this stage, which is a more robust pattern for Windows.
            agent {
                docker {
                    image 'python:3.9-slim'
                }
            }
            steps {
                // We will run all python commands sequentially here inside the container.
                
                echo "--- 1. Setting up Python virtual environment ---"
                // Use 'bat' for Windows commands. 'python' is the correct command in the container.
                bat "python -m venv venv"
                
                echo "--- 2. Installing dependencies ---"
                // Call pip from the venv directly using Windows path syntax.
                bat "venv\\Scripts\\pip install --no-cache-dir -r requirements.txt"
                
                echo "--- 3. Running data loading and preprocessing ---"
                bat "venv\\Scripts\\python data_loading.py"
                
                echo "--- 4. Starting model training ---"
                bat "venv\\Scripts\\python model_training.py"

                echo "--- 5. Evaluating the trained model ---"
                bat "venv\\Scripts\\python model_evaluation.py"
            }
        }
    }

    // 3. Post-build Actions
    // This section runs on the main agent after the container stage is complete.
    post {
        always {
            echo "--- Archiving the trained model file ---"
            archiveArtifacts artifacts: 'model.pkl', fingerprint: true
            
            echo "--- Cleaning up workspace ---"
            cleanWs()
        }
    }
}
