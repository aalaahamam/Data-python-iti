
pipeline {
    agent any

    parameters {
        // The name of the Jenkins job that runs the training pipeline.
        string(name: 'TRAINING_JOB_NAME', defaultValue: 'data-etl-iti', description: 'Name of the training pipeline Jenkins job.') // <-- تم التعديل
        // The build number from which to pull the artifact. 'lastSuccessfulBuild' is a good default.
        string(name: 'TRAINING_BUILD_NUMBER', defaultValue: 'lastSuccessfulBuild', description: 'Build number to get the model from (e.g., "15" or "lastSuccessfulBuild").')
    }

    environment {
        DOCKER_HUB_USERNAME = "aalaahamam16" 
        DOCKER_IMAGE_NAME = "${DOCKER_HUB_USERNAME}/ml-serving-app"
        DOCKER_CREDENTIALS_ID = "my-docker-id1" 
    }

    stages {

        // STAGE 1: Download Model Artifact
        stage('Download Model') {
            steps {
                echo "--- Downloading model.pkl from Training Job: ${params.TRAINING_JOB_NAME}, Build: ${params.TRAINING_BUILD_NUMBER} ---"
                copyArtifacts(
                    projectName: params.TRAINING_JOB_NAME,
                    selector: specific(params.TRAINING_BUILD_NUMBER),
                    target: '.', // Download to the current workspace
                    filter: 'model.pkl' // Only copy this file
                )
            }
        }

        // STAGE 2: Build Docker Image
        stage('Build Docker Image') {
            steps {
                script {
                    echo "--- Building Docker image: ${env.DOCKER_IMAGE_NAME} ---"
                    // We will tag the image with the build number of the *training* job for traceability.
                    docker.build("${env.DOCKER_IMAGE_NAME}:${params.TRAINING_BUILD_NUMBER}", ".")
                }
            }
        }

        stage('Login & Push Image') {
            steps {
                script {
                    echo "--- Logging in to Docker Hub and pushing the image ---"
                    // Use 'withRegistry' for secure authentication.
                    docker.withRegistry('https://index.docker.io/v1/', env.DOCKER_CREDENTIALS_ID  ) {
                        
                        def imageWithBuildTag = docker.image("${env.DOCKER_IMAGE_NAME}:${params.TRAINING_BUILD_NUMBER}")
                        
                        // Push the image with the specific build number tag.
                        echo "Pushing tag: ${params.TRAINING_BUILD_NUMBER}"
                        imageWithBuildTag.push()

                        // Also, tag the same image as 'latest' and push it.
                        echo "Pushing tag: latest"
                        imageWithBuildTag.push('latest')
                    }
                    echo "--- Image pushed successfully to Docker Hub! ---"
                }
            }
        }
    }

    post {
        always {
            echo "--- Deployment pipeline finished. Cleaning up. ---"
            bat "docker rmi ${env.DOCKER_IMAGE_NAME}:${params.TRAINING_BUILD_NUMBER}"
            bat "docker rmi ${env.DOCKER_IMAGE_NAME}:latest"
            cleanWs()
        }
    }
}
